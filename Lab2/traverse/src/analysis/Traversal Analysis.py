# -*- coding: utf-8 -*-
# <nbformat>3.0</nbformat>

# <markdowncell>

# Traverse.py Muti-Collection Analysis
# ====================================
# 
# In this notebook, we will be performing analyses on a number of comma-separated values files generated by `traverse.py`.
# 
# ### First, grab the csv files from my Git repo.
# 
# All of the CSV data files are stored on my GitHub repository at http://github.com/hawkw/traverse, in the `data/` directory. The `data/datafiles.csv` file contains a listing of the available datafiles (as well as some additional metadata). We're going to use the paths stored in that file to access the individual data files.

# <codecell>

import io, urllib2, bz2, pandas

# Get the metadata CSV that contains the listing of all runs
csvData = pandas.read_csv('https://raw.github.com/hawkw/traverse/master/data/datafiles.csv') 

datafiles = {}

# Loop through the filenames column and grab each filename.
for filename in csvData['Filename']:
    
    url = 'https://raw.github.com/hawkw/traverse/master/data/' + filename
    
    try:
        response = urllib2.urlopen(url).read()
    except Exception as e:
        print ("Caught HTTPError while accessing", e, url)
    else:
        try:
            data = bz2.decompress(response)
            datafiles[filename] = pandas.read_csv(io.BytesIO(data))
            print("Successfully decompressed" + filename)
        except Exception as e:
            print("Caught error \"{0}\" at {1}".format(e,url))
    

# <codecell>

print (csvData)

# <codecell>

# get all the machines self-reporting as "Darwin" (Mac OS X)
macs = csvData[csvData['Platform'] == 'darwin']

# get all the machines self-reporting as "Linux2" (Ubuntu)
ubuntus = csvData[csvData['Platform'] == 'linux2']

# <markdowncell>

# Start graphing
# --------------
# 
# Now that we've got our dataset, we can start doing some plotting 

# <codecell>

from scipy import stats
from pylab import *
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

%matplotlib inline

# make distribution plots for filesize on OSX and Ubuntu (matplotlib style)
bins = 10
rcParams['figure.figsize'] = 10, 8

for key, value in datafiles.items():
    if key in list(macs['Filename']):
        plt.hist([size for size in value['st_size'] if size > 1], bins, normed=True, log=True, alpha=.5, label=key);
        
plt.xlabel('File size')
plt.ylabel('Frequency (logarithmic)')
plt.title('Distribution of file sizes on Mac OS X')
plt.show()

for key, value in datafiles.items():
    if key in list(ubuntus['Filename']):
        plt.hist([size for size in value['st_size'] if size > 1], bins, normed=True, log=True, alpha=.5, label=key);
        
plt.xlabel('File size')
plt.ylabel('Frequency (logarithmic)')
plt.title('Distribution of file sizes on Ubuntu')
plt.show()


# <codecell>

# try and draw Seaborn KDE plots

with sns.palette_context("husl"):
    
    f, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 20), sharex=False)
    
    for key, value in datafiles.items():
        if key in list(macs['Filename']):
            path = key.replace('-', '/').split('.')[0]
            ax1 = sns.kdeplot(double([size for size in value['st_size'] if size > 1]), shade=True, label=path, legend=True, ax=ax1)
    
    ax1.set_xscale('log')
            
    for key, value in datafiles.items():
        if key in list(ubuntus['Filename']):
            path = key.replace('-', '/').split('.')[0]
            ax2 =  sns.kdeplot(double([size for size in value['st_size'] if size > 1]), shade=True, label=path, legend=True, ax=ax2)
    
    ax2.set_xscale('log')
    
    plt.show()

# <codecell>

# try and draw Seaborn distplot plots

with sns.palette_context("husl"):
    for key, value in datafiles.items():
        if key in list(macs['Filename']):
            ax = sns.distplot(double([size for size in value['st_size'] if size > 1]))
    ax=ax.set_yscale('log')
    plt.show()
            
with sns.palette_context("husl"):
    for key, value in datafiles.items():
        if key in list(ubuntus['Filename']):
           ax = sns.distplot(double([size for size in value['st_size'] if size > 1]))
    ax=ax.set_yscale('log')
    plt.show()

# <codecell>

# make distribution plots for link density on OSX and Ubuntu (matplotlib style)
bins = 10

for key, value in datafiles.items():
    if key in list(macs['Filename']):
        plt.hist([nlink for nlink in value['st_nlink'] if nlink > 1], bins, normed=True, log=True, alpha=.5);
        
plt.xlabel('inode link count')
plt.ylabel('Frequency (logarithmic)')
plt.title('Distribution of inode link density on Mac OS X')
plt.show()

for key, value in datafiles.items():
    if key in list(ubuntus['Filename']):
        plt.hist([nlink for nlink in value['st_nlink'] if nlink > 1], bins, normed=True, log=True, alpha=.5);
        
plt.xlabel('inode link count')
plt.ylabel('Frequency (logarithmic)')
plt.title('Distribution of inode link density on Ubuntu')
plt.show()

# <codecell>

# plot traversal times
plt.hist(csvData['Traversal Time'])
plt.show()

